<?xml version="1.0" encoding="utf-8"?><!--     $Log: $--><!-- Stylesheet to transform CrossRef unixref format     (http://doi.crossref.org/doc/tech/unixref1.0.xsd) to JSON. Unixred    was added to the CrossRef OpenURL resolver in February     (http://www.crossref.org/CrossTech/2008/02/added_xml_format_parameter_to.html)--><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">    <xsl:output method="text" encoding="utf-8" indent="yes"/>    <xsl:template match="/">        <xsl:text>{&#xD;</xsl:text>        <xsl:apply-templates select="//doi_record/crossref/journal"/>        <xsl:text>&#xD;}</xsl:text>    </xsl:template>    <xsl:template match="//doi_record/crossref/journal">        <!-- identifiers -->        <!-- doi -->        <!--	<xsl:text>&#09;&#09;"identifiers": {&#xD;</xsl:text> -->        <xsl:text>&#09;&#09;"doi":</xsl:text>        <xsl:text>"</xsl:text>        <xsl:value-of select="journal_article/doi_data/doi"/>        <xsl:text>"</xsl:text>        <!--	<xsl:text>&#xD;&#09;&#09;},</xsl:text> -->        <xsl:text>,</xsl:text>        <!-- journal metadata -->        <!-- journal -->        <xsl:text>&#xD;&#09;&#09;"title":</xsl:text>        <xsl:text>"</xsl:text>        <xsl:value-of select="journal_metadata/full_title"/>        <xsl:text>"</xsl:text>        <xsl:apply-templates select="journal_metadata/issn"/>        <!-- journal issue -->        <!-- volume -->        <xsl:text>,&#xD;&#09;&#09;"volume":</xsl:text>        <xsl:text>"</xsl:text>        <xsl:value-of select="journal_issue/journal_volume/volume"/>        <xsl:text>"</xsl:text>        <!-- issue -->		<xsl:if test="journal_article/pages/issue != ''">        <xsl:text>,&#xD;&#09;&#09;"issue":</xsl:text>        <xsl:text>"</xsl:text>        <xsl:value-of select="journal_issue/issue"/>        <xsl:text>"</xsl:text>		</xsl:if>        <!-- year -->        <xsl:text>,&#xD;&#09;&#09;"year":</xsl:text>        <xsl:text>"</xsl:text>        <xsl:value-of select="journal_article/publication_date/year"/>        <xsl:text>"</xsl:text>        <!-- date -->		<!-- a more exact date -->		<xsl:choose>			<xsl:when test="journal_article/publication_date/month != ''">				<xsl:apply-templates select="journal_article/publication_date" />			</xsl:when>			<xsl:when test="journal_issue/publication_date/month != ''">				<xsl:apply-templates select="journal_issue/publication_date" />			</xsl:when>		</xsl:choose>         <!-- journal article -->        <!-- spage -->		<xsl:if test="journal_article/pages/first_page != ''">        <xsl:text>,&#xD;&#09;&#09;"spage":</xsl:text>        <xsl:text>"</xsl:text>        <xsl:value-of select="journal_article/pages/first_page"/>        <xsl:text>"</xsl:text>		</xsl:if>        <!-- epage -->		<xsl:if test="journal_article/pages/last_page != ''">        <xsl:text>,&#xD;&#09;&#09;"epage":</xsl:text>        <xsl:text>"</xsl:text>        <xsl:value-of select="journal_article/pages/last_page"/>        <xsl:text>"</xsl:text>		</xsl:if>        <!-- title -->        <xsl:text>,&#xD;&#09;&#09;"atitle":</xsl:text>        <xsl:text>"</xsl:text><!--        <xsl:value-of select="journal_article/titles/title"/> -->		<xsl:variable name="atitle" select="journal_article/titles/title"/>		<xsl:call-template name="cleanQuote">			<xsl:with-param name="string" select="$atitle"/>		</xsl:call-template>        <xsl:text>"</xsl:text>        <!-- author -->        <xsl:text>,&#xD;&#09;&#09;"aulast":</xsl:text>        <xsl:text>"</xsl:text>        <xsl:value-of select="journal_article/contributors/person_name[1]/surname"/>        <xsl:text>"</xsl:text>        <!-- author list -->        <xsl:apply-templates select="journal_article/contributors"/>    </xsl:template>    <xsl:template match="journal_article/contributors">        <xsl:text>,&#xD;&#09;&#09;"authors":[</xsl:text>        <xsl:apply-templates select="person_name"/>        <xsl:text>&#xD;&#09;&#09;]</xsl:text>    </xsl:template>    <xsl:template match="person_name">        <xsl:if test="position() != 1">            <xsl:text>,</xsl:text>        </xsl:if>        <xsl:text>&#xD;&#09;&#09;&#09;{</xsl:text>         <xsl:text>"lastname":"</xsl:text>        <xsl:value-of select="surname"/>        <xsl:text>",</xsl:text>        <xsl:text>"forename":"</xsl:text>        <xsl:value-of select="given_name"/>        <xsl:text>"</xsl:text>        <xsl:text>}</xsl:text>    </xsl:template>    <!-- note that we format the ISSNs as NNNN-NNNN -->    <xsl:template match="issn">    	<xsl:choose>        <xsl:when test="@media_type='print'">            <xsl:text>,&#xD;&#09;&#09;"issn":"</xsl:text>            <xsl:choose>                <xsl:when test="contains(., '-')">                    <xsl:value-of select="."/>                </xsl:when>                <xsl:otherwise>                    <xsl:value-of select="substring(., 1, 4)"/>                    <xsl:text>-</xsl:text>                    <xsl:value-of select="substring(., 5, 4)"/>                </xsl:otherwise>            </xsl:choose>            <xsl:text>"</xsl:text>        </xsl:when>        <xsl:when test="@media_type='electronic'">            <xsl:text>,&#xD;&#09;&#09;"eissn":"</xsl:text>            <xsl:choose>                <xsl:when test="contains(., '-')">                    <xsl:value-of select="."/>                </xsl:when>                <xsl:otherwise>                    <xsl:value-of select="substring(., 1, 4)"/>                    <xsl:text>-</xsl:text>                    <xsl:value-of select="substring(., 5, 4)"/>                </xsl:otherwise>            </xsl:choose>            <xsl:text>"</xsl:text>        </xsl:when>        <xsl:otherwise>            <xsl:text>,&#xD;&#09;&#09;"issn":"</xsl:text>            <xsl:choose>                <xsl:when test="contains(., '-')">                    <xsl:value-of select="."/>                </xsl:when>                <xsl:otherwise>                    <xsl:value-of select="substring(., 1, 4)"/>                    <xsl:text>-</xsl:text>                    <xsl:value-of select="substring(., 5, 4)"/>                </xsl:otherwise>            </xsl:choose>            <xsl:text>"</xsl:text>  		</xsl:otherwise>        </xsl:choose>    </xsl:template>        <!-- From http://www.dpawson.co.uk/xsl/sect2/StringReplace.html#d10992e82 --><xsl:template name="cleanQuote"><xsl:param name="string" /><xsl:if test="contains($string, '&#x22;')"><xsl:value-of    select="substring-before($string, '&#x22;')" />\"<xsl:call-template    name="cleanQuote">                <xsl:with-param name="string"><xsl:value-ofselect="substring-after($string, '&#x22;')" />                </xsl:with-param>        </xsl:call-template></xsl:if><xsl:if test="not(contains($string, '&#x22;'))"><xsl:value-ofselect="$string" /></xsl:if></xsl:template><xsl:template match="publication_date">       <xsl:text>,&#xD;&#09;&#09;"date":</xsl:text>        <xsl:text>"</xsl:text>        <xsl:value-of select="year"/>        <xsl:text>-</xsl:text>        <xsl:choose>            <xsl:when test="month != ''">                <xsl:value-of select="month"/>            </xsl:when>            <xsl:otherwise>                <xsl:text>00</xsl:text>            </xsl:otherwise>        </xsl:choose>        <xsl:text>-</xsl:text>        <xsl:choose>            <xsl:when test="day != ''">                <xsl:value-of select="day"/>            </xsl:when>            <xsl:otherwise>                <xsl:text>00</xsl:text>            </xsl:otherwise>        </xsl:choose>        <xsl:text>"</xsl:text></xsl:template></xsl:stylesheet>